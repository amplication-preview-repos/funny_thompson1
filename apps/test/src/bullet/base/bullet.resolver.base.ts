/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Bullet } from "./Bullet";
import { BulletCountArgs } from "./BulletCountArgs";
import { BulletFindManyArgs } from "./BulletFindManyArgs";
import { BulletFindUniqueArgs } from "./BulletFindUniqueArgs";
import { CreateBulletArgs } from "./CreateBulletArgs";
import { UpdateBulletArgs } from "./UpdateBulletArgs";
import { DeleteBulletArgs } from "./DeleteBulletArgs";
import { BulletService } from "../bullet.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Bullet)
export class BulletResolverBase {
  constructor(
    protected readonly service: BulletService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Bullet",
    action: "read",
    possession: "any",
  })
  async _bulletsMeta(
    @graphql.Args() args: BulletCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Bullet])
  @nestAccessControl.UseRoles({
    resource: "Bullet",
    action: "read",
    possession: "any",
  })
  async bullets(@graphql.Args() args: BulletFindManyArgs): Promise<Bullet[]> {
    return this.service.bullets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Bullet, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Bullet",
    action: "read",
    possession: "own",
  })
  async bullet(
    @graphql.Args() args: BulletFindUniqueArgs
  ): Promise<Bullet | null> {
    const result = await this.service.bullet(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bullet)
  @nestAccessControl.UseRoles({
    resource: "Bullet",
    action: "create",
    possession: "any",
  })
  async createBullet(@graphql.Args() args: CreateBulletArgs): Promise<Bullet> {
    return await this.service.createBullet({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bullet)
  @nestAccessControl.UseRoles({
    resource: "Bullet",
    action: "update",
    possession: "any",
  })
  async updateBullet(
    @graphql.Args() args: UpdateBulletArgs
  ): Promise<Bullet | null> {
    try {
      return await this.service.updateBullet({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bullet)
  @nestAccessControl.UseRoles({
    resource: "Bullet",
    action: "delete",
    possession: "any",
  })
  async deleteBullet(
    @graphql.Args() args: DeleteBulletArgs
  ): Promise<Bullet | null> {
    try {
      return await this.service.deleteBullet(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
